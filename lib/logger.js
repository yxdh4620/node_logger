// Generated by CoffeeScript 1.4.0
(function() {
  var ERROR, INFO, LEVELS, LOG, Logger, NAME_TAG, NOOP_FN, PID, WARN, join, logger;

  ERROR = 3;

  WARN = 2;

  INFO = 1;

  LOG = 0;

  NOOP_FN = function() {};

  LEVELS = ["log", "info", "warn", "error"];

  PID = "[" + process.pid + "]";

  NAME_TAG = {
    "log": "LOG -",
    "info": "\u001b[32mINFO\u001b[0m -",
    "warn": "\u001b[33mWARNING\u001b[0m -",
    "error": "\u001b[31mERROR\u001b[0m -"
  };

  join = Array.prototype.join;

  Logger = (function() {

    function Logger() {
      this._level = LOG;
      this.setLevel(this._level);
      this._async();
    }

    Logger.prototype.setLevel = function(level) {
      var i, method, _i, _len;
      if (level == null) {
        level = 0;
      }
      for (i = _i = 0, _len = LEVELS.length; _i < _len; i = ++_i) {
        method = LEVELS[i];
        if (i < level) {
          this._defineNoopMethod(method);
        } else {
          this._defineMethod(method);
        }
      }
      this._level = level;
      return this;
    };

    Logger.prototype._defineMethod = function(name) {
      var tag;
      tag = NAME_TAG[name];
      return this[name] = function() {
        return console[name](PID, (new Date).toISOString(), tag, join.call(arguments));
      };
    };

    Logger.prototype._defineNoopMethod = function(name) {
      return this[name] = NOOP_FN;
    };

    Logger.prototype._async = function() {
      var _this = this;
      this._cache = {
        log: [],
        info: [],
        warn: [],
        error: []
      };
      return setInterval(function() {
        var key, logs, value, _ref, _results;
        _ref = _this._cache;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          if (value.length === 0) {
            continue;
          }
          logs = value.join("\r\n");
          console[key](logs);
          _results.push(value.length = 0);
        }
        return _results;
      }, 5 * 1000);
    };

    return Logger;

  })();

  logger = new Logger();

  logger.ERROR = ERROR;

  logger.WARN = WARN;

  logger.INFO = INFO;

  logger.LOG = LOG;

  module.exports = logger;

}).call(this);
